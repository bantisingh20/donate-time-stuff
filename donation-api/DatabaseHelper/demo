const DatabaseHelper = require('./DatabaseHelper');

async function exampleUsage() {
  const dbHelper = new DatabaseHelper();

  try {
    // Example: Execute a query to get the max value
    const query = 'SELECT MAX(id) AS MaxValue FROM your_table';
    const result = await dbHelper.executeScalar(query);
    console.log('Max ID:', result.MaxValue);

    // Example: Insert data into a table
    const insertQuery = 'INSERT INTO your_table (column1, column2) VALUES (?, ?)';
    await dbHelper.executeNonQuery(insertQuery, ['value1', 'value2']);

    // Example: Use transactions
    const transaction = await dbHelper.beginTransaction();
    try {
      await dbHelper.executeNonQuery('UPDATE your_table SET column1 = ? WHERE column2 = ?', ['new_value', 'value2'], transaction);
      await dbHelper.commitTransaction(transaction);
    } catch (error) {
      await dbHelper.rollbackTransaction(transaction);
      console.log('Transaction failed and was rolled back:', error.message);
    }

  } catch (error) {
    console.log('Error occurred:', error.message);
  }
}

exampleUsage();


// Example of calling a stored procedure
async function executeStoredProcedure() {
    const dbHelper = new DatabaseHelper();
    const procedureName = 'your_procedure_name';
    const params = [param1, param2, ...];
    const result = await dbHelper.executeScalar(`EXEC $
        {procedureName} @param1, @param2`, params);
    console.log(result);
  }
  

  const sql = require('mssql');

// Define the SQL Server configuration
const config = {
    user: 'your_db_user',
    password: 'your_db_password',
    server: 'your_server_name',
    database: 'your_database_name',
    options: {
        encrypt: true, // Use this if your SQL Server is configured for encryption
        trustServerCertificate: true // Set to true if using self-signed cert
    }
};

// Function to execute the stored procedure
async function insertCustomer(userId, customerName, customerEmail) {
    try {
        // Create a connection pool
        const pool = await sql.connect(config);

        // Execute the stored procedure with parameters
        const result = await pool.request()
            .input('UserId', sql.BigInt, userId) // Input parameter
            .input('CustomerName', sql.NVarChar(100), customerName) // Input parameter
            .input('CustomerEmail', sql.NVarChar(100), customerEmail) // Input parameter
            .output('NewCustomerId', sql.BigInt) // Output parameter
            .execute('sp_InsertCustomer'); // Stored procedure name

        // Access the output parameter (NewCustomerId)
        const newCustomerId = result.output.NewCustomerId;
        console.log('New Customer ID:', newCustomerId);

        // You can also return any result if you need
        return newCustomerId;
    } catch (err) {
        console.error('Error executing stored procedure:', err);
    }
}

// Example usage
const userId = 1;
const customerName = 'John Doe';
const customerEmail = 'john.doe@example.com';

insertCustomer(userId, customerName, customerEmail).then(newCustomerId => {
    console.log('Inserted new customer with ID:', newCustomerId);
});
